/**
 * Reminder Model - MongoDB schema for reminders and notifications
 * 
 * This model represents reminders for important dates, payments,
 * and expense tracking activities.
 * 
 * Features:
 * - User and student-specific reminders
 * - Different reminder types
 * - Due date tracking
 * - Read/unread status
 * - Recurring reminders
 * 
 * @author Education Expense Dashboard Team
 * @version 1.0.0
 * @created 2025-06-25
 */

import mongoose from 'mongoose';
import { logger } from '../utils/logger.js';

const reminderSchema = new mongoose.Schema({
  // User reference
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: [true, 'User ID is required'],
    index: true,
  },

  // Optional student reference
  studentId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Student',
    default: null,
    index: true,
  },

  // Reminder content
  title: {
    type: String,
    required: [true, 'Reminder title is required'],
    trim: true,
    maxlength: [200, 'Title cannot exceed 200 characters'],
  },

  message: {
    type: String,
    required: [true, 'Reminder message is required'],
    trim: true,
    maxlength: [1000, 'Message cannot exceed 1000 characters'],
  },

  // Reminder type and priority
  type: {
    type: String,
    required: [true, 'Reminder type is required'],
    enum: {
      values: ['info', 'warning', 'critical', 'monthly', 'payment', 'deadline', 'budget_alert'],
      message: 'Invalid reminder type'
    },
    default: 'info',
  },

  priority: {
    type: String,
    enum: ['low', 'medium', 'high', 'urgent'],
    default: 'medium',
  },

  // Timing
  dueDate: {
    type: Date,
    required: [true, 'Due date is required'],
    index: true,
  },

  reminderDate: {
    type: Date,
    default: function() {
      // Default to 7 days before due date
      return new Date(this.dueDate.getTime() - 7 * 24 * 60 * 60 * 1000);
    },
    index: true,
  },

  // Status
  isRead: {
    type: Boolean,
    default: false,
    index: true,
  },

  isCompleted: {
    type: Boolean,
    default: false,
    index: true,
  },

  isDismissed: {
    type: Boolean,
    default: false,
  },

  // Recurring reminders
  isRecurring: {
    type: Boolean,
    default: false,
  },

  recurringPattern: {
    type: String,
    enum: ['daily', 'weekly', 'monthly', 'quarterly', 'yearly'],
    default: null,
  },

  recurringEndDate: {
    type: Date,
    default: null,
  },

  // Metadata
  category: {
    type: String,
    default: 'general',
    trim: true,
    lowercase: true,
  },

  relatedExpenseCategory: {
    type: String,
    default: null,
    trim: true,
    lowercase: true,
  },

  amount: {
    type: Number,
    default: null,
    min: [0, 'Amount cannot be negative'],
  },

  // Notification settings
  emailSent: {
    type: Boolean,
    default: false,
  },

  emailSentAt: {
    type: Date,
    default: null,
  },

  // System generated flags
  isSystemGenerated: {
    type: Boolean,
    default: false,
  },

  autoGeneratedFrom: {
    type: String,
    enum: ['budget_alert', 'payment_due', 'monthly_tracking', 'plan_review'],
    default: null,
  },

}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// Compound indexes for performance
reminderSchema.index({ userId: 1, dueDate: 1 });
reminderSchema.index({ userId: 1, isRead: 1, dueDate: 1 });
reminderSchema.index({ studentId: 1, dueDate: 1 });
reminderSchema.index({ type: 1, dueDate: 1 });
reminderSchema.index({ reminderDate: 1, isCompleted: 1 });

// Virtual for days until due
reminderSchema.virtual('daysUntilDue').get(function() {
  const now = new Date();
  const diffTime = this.dueDate.getTime() - now.getTime();
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
});

// Virtual for status
reminderSchema.virtual('status').get(function() {
  if (this.isCompleted) return 'completed';
  if (this.isDismissed) return 'dismissed';
  
  const now = new Date();
  if (this.dueDate < now) return 'overdue';
  if (this.reminderDate <= now) return 'active';
  return 'pending';
});

// Virtual for urgency level
reminderSchema.virtual('urgencyLevel').get(function() {
  const daysUntilDue = this.daysUntilDue;
  
  if (daysUntilDue < 0) return 'overdue';
  if (daysUntilDue === 0) return 'today';
  if (daysUntilDue <= 3) return 'urgent';
  if (daysUntilDue <= 7) return 'soon';
  return 'normal';
});

// Pre-save middleware for validation
reminderSchema.pre('save', function(next) {
  // Ensure reminder date is before due date
  if (this.reminderDate >= this.dueDate) {
    this.reminderDate = new Date(this.dueDate.getTime() - 24 * 60 * 60 * 1000); // 1 day before
  }
  
  // Set recurring end date if not specified
  if (this.isRecurring && !this.recurringEndDate) {
    // Default to 1 year from due date
    this.recurringEndDate = new Date(this.dueDate.getTime() + 365 * 24 * 60 * 60 * 1000);
  }
  
  next();
});

// Pre-save middleware for logging
reminderSchema.pre('save', function(next) {
  if (this.isNew) {
    logger.logDatabase('reminder_created', 'reminders', {
      reminderId: this._id,
      userId: this.userId,
      studentId: this.studentId,
      type: this.type,
      dueDate: this.dueDate
    });
  }
  next();
});

// Instance method to mark as read
reminderSchema.methods.markAsRead = async function() {
  this.isRead = true;
  await this.save();
  
  logger.logDatabase('reminder_read', 'reminders', {
    reminderId: this._id,
    userId: this.userId
  });
  
  return this;
};

// Instance method to mark as completed
reminderSchema.methods.markAsCompleted = async function() {
  this.isCompleted = true;
  this.isRead = true;
  await this.save();
  
  logger.logDatabase('reminder_completed', 'reminders', {
    reminderId: this._id,
    userId: this.userId
  });
  
  return this;
};

// Instance method to dismiss reminder
reminderSchema.methods.dismiss = async function() {
  this.isDismissed = true;
  this.isRead = true;
  await this.save();
  
  logger.logDatabase('reminder_dismissed', 'reminders', {
    reminderId: this._id,
    userId: this.userId
  });
  
  return this;
};

// Instance method to snooze reminder
reminderSchema.methods.snooze = async function(days = 1) {
  this.reminderDate = new Date(Date.now() + days * 24 * 60 * 60 * 1000);
  await this.save();
  
  logger.logDatabase('reminder_snoozed', 'reminders', {
    reminderId: this._id,
    userId: this.userId,
    snoozedays: days
  });
  
  return this;
};

// Static method to find active reminders for user
reminderSchema.statics.findActiveForUser = function(userId, includeRead = false) {
  const query = {
    userId,
    isCompleted: false,
    isDismissed: false,
    reminderDate: { $lte: new Date() }
  };
  
  if (!includeRead) {
    query.isRead = false;
  }
  
  return this.find(query).sort({ priority: -1, dueDate: 1 });
};

// Static method to find upcoming reminders
reminderSchema.statics.findUpcoming = function(userId, days = 7) {
  const endDate = new Date(Date.now() + days * 24 * 60 * 60 * 1000);
  
  return this.find({
    userId,
    isCompleted: false,
    isDismissed: false,
    dueDate: { $lte: endDate }
  }).sort({ dueDate: 1 });
};

// Static method to find overdue reminders
reminderSchema.statics.findOverdue = function(userId) {
  return this.find({
    userId,
    isCompleted: false,
    isDismissed: false,
    dueDate: { $lt: new Date() }
  }).sort({ dueDate: 1 });
};

// Static method to create budget alert reminder
reminderSchema.statics.createBudgetAlert = async function(userId, studentId, message, amount = null) {
  return this.create({
    userId,
    studentId,
    title: 'Budget Alert',
    message,
    type: 'budget_alert',
    priority: 'high',
    dueDate: new Date(),
    reminderDate: new Date(),
    amount,
    isSystemGenerated: true,
    autoGeneratedFrom: 'budget_alert'
  });
};

// Static method to create payment reminder
reminderSchema.statics.createPaymentReminder = async function(userId, studentId, title, message, dueDate, amount = null) {
  return this.create({
    userId,
    studentId,
    title,
    message,
    type: 'payment',
    priority: 'high',
    dueDate: new Date(dueDate),
    amount,
    category: 'payment'
  });
};

// Static method to create recurring monthly tracking reminder
reminderSchema.statics.createMonthlyTrackingReminder = async function(userId) {
  const nextMonth = new Date();
  nextMonth.setMonth(nextMonth.getMonth() + 1);
  nextMonth.setDate(1); // First day of next month
  
  return this.create({
    userId,
    title: 'Monthly Expense Tracking',
    message: 'Time to log your monthly education expenses and review your budget.',
    type: 'monthly',
    priority: 'medium',
    dueDate: nextMonth,
    isRecurring: true,
    recurringPattern: 'monthly',
    isSystemGenerated: true,
    autoGeneratedFrom: 'monthly_tracking'
  });
};

const Reminder = mongoose.model('Reminder', reminderSchema);

export default Reminder;
