version: '3.8'

services:
  # ============================================================================
  # DATABASE SERVICES
  # ============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: instatus_postgres
    environment:
      POSTGRES_DB: instatus
      POSTGRES_USER: instatus_user
      POSTGRES_PASSWORD: instatus_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seeds:/docker-entrypoint-initdb.d/seeds
    networks:
      - instatus_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U instatus_user -d instatus"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: instatus_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - instatus_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # BACKEND SERVICES
  # ============================================================================
  
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: instatus_backend
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://instatus_user:instatus_password@postgres:5432/instatus
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      FRONTEND_URL: http://localhost:3000
      BACKEND_URL: http://localhost:3001
      
      # OAuth Configuration
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      
      # Email Configuration
      SENDGRID_API_KEY: ${SENDGRID_API_KEY:-}
      FROM_EMAIL: noreply@instatus.local
      
      # SMS Configuration
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID:-}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN:-}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER:-}
      
      # Slack Configuration
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}
      
      # Monitoring Configuration
      MONITORING_ENABLED: true
      DEFAULT_CHECK_INTERVAL: 300
      MAX_RETRY_ATTEMPTS: 3
      
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - instatus_network
    restart: unless-stopped
    command: npm run dev

  # ============================================================================
  # MONITORING SERVICE
  # ============================================================================
  
  monitoring:
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    container_name: instatus_monitoring
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://instatus_user:instatus_password@postgres:5432/instatus
      REDIS_URL: redis://redis:6379
      BACKEND_URL: http://backend:3001
      
      # Monitoring Configuration
      CHECK_INTERVAL: 30
      BATCH_SIZE: 10
      TIMEOUT: 30
      MAX_RETRIES: 3
      
    volumes:
      - ./monitoring:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - instatus_network
    restart: unless-stopped
    command: npm run dev

  # ============================================================================
  # NOTIFICATION SERVICE
  # ============================================================================
  
  notifications:
    build:
      context: ./notifications
      dockerfile: Dockerfile
    container_name: instatus_notifications
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://instatus_user:instatus_password@postgres:5432/instatus
      REDIS_URL: redis://redis:6379
      
      # Email Configuration
      SENDGRID_API_KEY: ${SENDGRID_API_KEY:-}
      FROM_EMAIL: noreply@instatus.local
      
      # SMS Configuration
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID:-}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN:-}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER:-}
      
      # Slack Configuration
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}
      
      # Notification Configuration
      MAX_RETRY_ATTEMPTS: 3
      RETRY_DELAY: 60
      BATCH_SIZE: 50
      
    volumes:
      - ./notifications:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - instatus_network
    restart: unless-stopped
    command: npm run dev

  # ============================================================================
  # FRONTEND SERVICE
  # ============================================================================
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: instatus_frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
      NEXT_PUBLIC_APP_NAME: Instatus Clone
      NEXT_PUBLIC_APP_DESCRIPTION: A comprehensive status page system
      
      # OAuth Configuration
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: your-nextauth-secret-change-in-production
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - instatus_network
    restart: unless-stopped
    command: npm run dev

  # ============================================================================
  # DEVELOPMENT TOOLS
  # ============================================================================
  
  # Database administration tool
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: instatus_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@instatus.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - instatus_network
    profiles:
      - tools

  # Redis administration tool
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: instatus_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - instatus_network
    profiles:
      - tools

  # ============================================================================
  # REVERSE PROXY (for production-like setup)
  # ============================================================================
  
  nginx:
    image: nginx:alpine
    container_name: instatus_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - instatus_network
    profiles:
      - production

# ============================================================================
# VOLUMES
# ============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

# ============================================================================
# NETWORKS
# ============================================================================

networks:
  instatus_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
