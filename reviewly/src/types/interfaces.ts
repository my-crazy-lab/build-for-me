/**
 * Core Interfaces for Reviewly Application
 *
 * This file contains all the TypeScript interfaces used throughout the application
 * for type safety and better development experience. These interfaces define the
 * structure of data models including User, Review, Skills, Feedback, Company, etc.
 *
 * Created: 2025-06-24
 * Version: 1.0.0
 * Author: Reviewly Development Team
 */

import {
  UserRole,
  ThemeMode,
  CompanySize,
  ReviewCycle,
  ReviewStatus,
  QuestionType,
  SkillLevel,
  GoalCategory,
  GoalStatus,
  Priority,
  FeedbackType,
  IntegrationType,
  IntegrationSource,
  ImportDataType,
  BadgeType,
  BadgeRarity
} from './enums';

// Base interface for all entities with common fields
export interface BaseEntity {
  id: string;
  createdAt: Date;
  updatedAt: Date;
}

// User related interfaces
export interface User extends BaseEntity {
  email: string;
  name: string;
  avatar?: string;
  role: UserRole;
  department?: string;
  position?: string;
  managerId?: string;
  companies: UserCompany[];
  preferences: UserPreferences;
  isActive: boolean;
}

export interface UserCompany {
  companyId: string;
  companyName: string;
  role: UserRole;
  department?: string;
  position?: string;
  startDate: Date;
  endDate?: Date;
  isActive: boolean;
}

export interface UserPreferences {
  language: string;
  theme: ThemeMode;
  notifications: NotificationSettings;
  timezone: string;
}

export interface NotificationSettings {
  email: boolean;
  inApp: boolean;
  reviewDeadlines: boolean;
  feedbackReceived: boolean;
  milestones: boolean;
}

// Company related interfaces
export interface Company extends BaseEntity {
  name: string;
  logo?: string;
  industry: string;
  size: CompanySize;
  settings: CompanySettings;
  departments: Department[];
}

export interface Department extends BaseEntity {
  name: string;
  companyId: string;
  managerId?: string;
  description?: string;
}

export interface CompanySettings {
  reviewCycle: ReviewCycle;
  customQuestions: ReviewQuestion[];
  skillCategories: SkillCategory[];
  salaryBenchmarks: SalaryBenchmark[];
  integrations: IntegrationSettings;
}

// Review related interfaces
export interface Review extends BaseEntity {
  userId: string;
  companyId: string;
  period: ReviewPeriod;
  status: ReviewStatus;
  selfReview: SelfReview;
  peerReviews: PeerReview[];
  managerReview?: ManagerReview;
  summary: ReviewSummary;
  goals: Goal[];
  skillAssessments: SkillAssessment[];
}

export interface SelfReview {
  sections: ReviewSection[];
  completedAt?: Date;
  isSubmitted: boolean;
}

export interface ReviewSection {
  id: string;
  title: string;
  description: string;
  questions: ReviewQuestion[];
  responses: ReviewResponse[];
  importedData: ImportedData[];
}

export interface ReviewQuestion {
  id: string;
  text: string;
  type: QuestionType;
  required: boolean;
  options?: string[];
  placeholder?: string;
  maxLength?: number;
}

export interface ReviewResponse {
  questionId: string;
  answer: string;
  attachments?: Attachment[];
  lastModified: Date;
}

export interface ImportedData {
  source: IntegrationSource;
  type: ImportDataType;
  title: string;
  description: string;
  url?: string;
  metadata: Record<string, any>;
  importedAt: Date;
}

export interface PeerReview extends BaseEntity {
  reviewId: string;
  reviewerId: string;
  reviewerName?: string; // Anonymous option
  isAnonymous: boolean;
  responses: ReviewResponse[];
  completedAt?: Date;
  isSubmitted: boolean;
}

export interface ManagerReview extends BaseEntity {
  reviewId: string;
  managerId: string;
  responses: ReviewResponse[];
  performanceRating: PerformanceRating;
  recommendations: string[];
  completedAt?: Date;
  isSubmitted: boolean;
}

export interface ReviewSummary {
  overallRating: number;
  strengths: string[];
  areasForImprovement: string[];
  keyAchievements: string[];
  skillsGained: string[];
  autoGeneratedSummary: string;
  manualNotes?: string;
}

// Skill related interfaces
export interface Skill extends BaseEntity {
  name: string;
  category: string;
  description?: string;
  level: SkillLevel;
  isCore: boolean;
}

export interface SkillCategory extends BaseEntity {
  name: string;
  description?: string;
  color: string;
  skills: Skill[];
}

export interface SkillAssessment {
  skillId: string;
  skillName: string;
  currentLevel: SkillLevel;
  targetLevel: SkillLevel;
  evidence: string[];
  progress: number; // 0-100
  lastAssessed: Date;
}

// Goal related interfaces
export interface Goal extends BaseEntity {
  title: string;
  description: string;
  category: GoalCategory;
  priority: Priority;
  status: GoalStatus;
  targetDate: Date;
  progress: number; // 0-100
  milestones: Milestone[];
  skills: string[]; // Skill IDs
}

export interface Milestone {
  id: string;
  title: string;
  description?: string;
  targetDate: Date;
  completedAt?: Date;
  isCompleted: boolean;
}

// Feedback related interfaces
export interface Feedback extends BaseEntity {
  fromUserId: string;
  toUserId: string;
  reviewId?: string;
  type: FeedbackType;
  content: string;
  isAnonymous: boolean;
  tags: string[];
  sentiment: SentimentScore;
}

export interface SentimentScore {
  overall: number; // -1 to 1
  positive: number; // 0 to 1
  negative: number; // 0 to 1
  neutral: number; // 0 to 1
}

// Integration related interfaces
export interface Integration extends BaseEntity {
  type: IntegrationType;
  settings: IntegrationSettings;
  isActive: boolean;
  lastSync?: Date;
}

export interface IntegrationSettings {
  github?: GitHubSettings;
  jira?: JiraSettings;
  notion?: NotionSettings;
}

export interface GitHubSettings {
  accessToken: string;
  repositories: string[];
  includeCommits: boolean;
  includePRs: boolean;
  includeIssues: boolean;
}

export interface JiraSettings {
  serverUrl: string;
  accessToken: string;
  projects: string[];
  includeIssues: boolean;
  includeComments: boolean;
}

export interface NotionSettings {
  accessToken: string;
  databases: string[];
  pages: string[];
}

// Gamification related interfaces
export interface Badge extends BaseEntity {
  name: string;
  description: string;
  icon: string;
  color: string;
  criteria: BadgeCriteria;
  rarity: BadgeRarity;
}

export interface BadgeCriteria {
  type: BadgeType;
  threshold: number;
  timeframe?: string;
  skills?: string[];
}

export interface UserBadge {
  badgeId: string;
  userId: string;
  earnedAt: Date;
  progress: number;
}

// Analytics and reporting interfaces
export interface AnalyticsData {
  userId?: string;
  companyId?: string;
  department?: string;
  period: ReviewPeriod;
  metrics: PerformanceMetrics;
  trends: TrendData[];
  comparisons: ComparisonData[];
}

export interface PerformanceMetrics {
  overallScore: number;
  skillGrowth: number;
  goalCompletion: number;
  peerFeedbackScore: number;
  engagementScore: number;
}

export interface TrendData {
  metric: string;
  values: { date: Date; value: number }[];
  trend: 'up' | 'down' | 'stable';
}

export interface ComparisonData {
  metric: string;
  userValue: number;
  teamAverage: number;
  companyAverage: number;
  industryBenchmark?: number;
}

// Salary and compensation interfaces
export interface SalaryBenchmark extends BaseEntity {
  position: string;
  level: string;
  location: string;
  currency: string;
  minSalary: number;
  maxSalary: number;
  medianSalary: number;
  source: string;
  lastUpdated: Date;
}

export interface CompensationRecommendation {
  userId: string;
  currentSalary: number;
  recommendedSalary: number;
  justification: string[];
  marketData: SalaryBenchmark[];
  confidenceScore: number;
}

// Utility interfaces
export interface Attachment {
  id: string;
  name: string;
  url: string;
  type: string;
  size: number;
  uploadedAt: Date;
}

export interface ReviewPeriod {
  startDate: Date;
  endDate: Date;
  name: string;
  isActive: boolean;
}

export interface PerformanceRating {
  overall: number; // 1-5 scale
  categories: { [key: string]: number };
  comments: string;
}

// API Response interfaces
export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
}

export interface PaginatedResponse<T> {
  items: T[];
  total: number;
  page: number;
  limit: number;
  hasNext: boolean;
  hasPrev: boolean;
}
